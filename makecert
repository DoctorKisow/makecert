#!/bin/bash
#
# makecert - A script used to convert the CA's certificate files into formats used by different services then upload them to the server.
# Copyright (c) 2022-2024 Dr. Matthew Kisow. All rights reserved.
# Dr. Matthew Kisow <mkisow@ccac.edu>

# Enable erroring on un-bound (undefined) variables.
set -u

# Enable filename patterns that match no files to expand to a null string, rather than themselves.
shopt -s nullglob

# ************************* global variable definitions ************************
g_PROGNAME="$(basename "${0}")"
g_VERSION="0.0.2"
g_PROGRAM_NAME="makecert"
g_PROGRAM_DESCRIPTION="A script used to convert the CA's certificate files into formats used by different services then upload them to the server."
g_SCRIPT_URL="https://raw.githubusercontent.com/DoctorKisow/makecert/main/makecert"
g_COPYRIGHT_TEXT="Copyright (c) 2022-2024 Dr. Matthew Kisow. All rights reserved."
g_AUTHOR_TEXT="Dr. Matthew Kisow"
g_AUTHOR_EMAIL="mkisow@ccac.edu"

# Script location where it was run from.
g_SCRIPT_LOCATION="${BASH_SOURCE[@]}"

# (g_<color>_TEXT) - Variables used to control how output is displayed to the screen during script execution.
g_RED_TEXT="" g_GREEN_TEXT="" g_YELLOW_TEXT="" g_BLUE_TEXT="" g_MAGENTA_TEXT="" g_CYAN_TEXT="" g_WHITE_TEXT="" g_RESET_ATTS=""  g_ALERT_TEXT=""
if [[ -v TERM && -n "${TERM}" && "${TERM}" != "dumb" ]]; then
  g_RD_TEXT="$(tput setaf 1)$(tput bold)"
  g_GREEN_TEXT="$(tput setaf 2)$(tput bold)"
  g_YELLOW_TEXT="$(tput setaf 3)$(tput bold)"
  g_BLUE_TEXT="$(tput setaf 4)$(tput bold)"
  g_MAGENTA_TEXT="$(tput setaf 5)$(tput bold)"
  g_CYAN_TEXT="$(tput setaf 6)$(tput bold)"
  g_WHITE_TEXT="$(tput setaf 7)$(tput bold)"
  g_RESET_ATTS="$(tput sgr0)"
  g_ALERT_TEXT="$(tput bel)"
fi

# (g_PREFIXSTRING) - String value used to indicate what is appended to the output at the beginning of screen output during script execution.
g_PREFIXSTRING="*  "

# (g_SHOWPREFIX) - String value used to indicate normal script execution.
g_SHOWPREFIX="${g_GREEN_TEXT}${g_PREFIXSTRING}${g_RESET_ATTS}"

# (g_SCRIPT_PATH) - String value used to hold the execution path of the script.
g_SCRIPT_PATH="`dirname \"$0\"`"
g_SCRIPT_PATH="`( cd \"$g_SCRIPT_PATH\" && pwd )`"

# (g_ARG_<variable>) - Boolean values used to indicate which command line options are set during execution; the default for all values is 0.
# WARNING: DO NOT MODIFY THESE VALUE(S)!
g_ARG_MAKECERT=0
g_ARG_UPDATESVR=0
g_ARG_UPDATE=0
g_ARG_SERVERNAME=""

# **************************** basic script functions **************************
# (cleanup_and_exit_with_code) - Function used to properly cleanup the enviornment after an error; the passed value are 1 (error) or 0 (normal).
function cleanup_and_exit_with_code ()
{
  # (l_BOOL) - Boolean value used to indicate a value of 0 or 1.
  l_BOOL='^[0-1]+$'
  if ! [[ $1 =~ $l_BOOL ]]; then
    error "Function: cleanup_and_exit_with_code was passed a value that is out of bounds."
  fi

  # If output was redirected to the logfile during an interactive session, repoint it to the console.
  exec &>$(tty)

  # Error trapping is turned off because we want to handle errors.
  set +e
  trap - EXIT

  exit $1
}

# (display_usage_message_and_bail_out) - Function used to display the usage when an invalid command line option is passed to the script.
function display_usage_message_and_bail_out ()
{
  if [ ! -z "${1+x}" ]; then
    printf "%s: %s\n" "${g_PROGNAME}" "${1}" >&2
  fi

  print_usage >&2
  cleanup_and_exit_with_code 1
}

# (error) - Function for the error catching routine, display an error cleanup and exit the script.
function error ()
{
  echo
  echo -e "${g_RED_TEXT}${g_PREFIXSTRING}${g_RESET_ATTS}  ERROR: ${1} - exiting" >&2
  cleanup_and_exit_with_code 1
}

# (help) - Function used to display the scripts usage and command line options.
function help ()
{
  printf "${g_PROGNAME} - ${g_PROGRAM_DESCRIPTION}\n"
  print_usage
}

# (info) - Function for formatted informational messages.
function info ()
{
  echo -e "${g_CYAN_TEXT}${g_PREFIXSTRING}${g_RESET_ATTS}   INFO: ${1}" >&2
}

# (update-info) - Function for formatted informational messages.
function update-info ()
{
  echo -e "${g_CYAN_TEXT}${g_PREFIXSTRING}${g_RESET_ATTS} UPDATE: ${1}" >&2
}

# (internal_consistency_option_checks) - Function used to validate the some of the more obvious configuration file snafus.
function internal_consistency_option_checks ()
{
  while true ; do
    case "$g_FIRST_TOKEN" in
      -m)
        if ((g_ARG_UPDATESVR || g_ARG_UPDATE)); then
          warning "You cannot create the certificates with any other options set."
          cleanup_and_exit_with_code 1
        fi
        break
        ;;
      -U)
        if ((g_ARG_MAKECERT || g_ARG_UPDATE)); then
          warning "You cannot update a servers certificates with any other options set."
          cleanup_and_exit_with_code 1
        fi
        break
        ;;
      -u)
        if ((g_ARG_MAKECERT || g_ARG_UPDATESVR)); then
          warning "You cannot update this script with any other options set."
          cleanup_and_exit_with_code 1
        fi
        break
        ;;
    esac
  done
}

# (print_usage) - Function used to display the scripts usage and command line options.
function print_usage ()
{
  clear
  script_banner

  cat << EOF

  Usage: ${g_PROGNAME} [-h] [-m|--makecert] [-u|--updatesvr <server name/ip>]
                  [-u|--update] [-v]

  Options:
     -h                     show this help message
     -m --makecert          make certificate files from the downloaded CA
                            files
     -U --updatesvr         install the certificate on the server
     -u --update            update the ${g_PROGNAME} script
     -v                     display the version number of ${g_PROGNAME} and
                            exit
EOF
}

# (print_version) - Function used to print the script version.
function print_version ()
{
  clear
  script_banner

  printf "%s\n" "${g_VERSION}"
}

# (process_command_line_options) - Function used to set and validate command line options passed to the script.
function process_command_line_options ()
{
  # (l_TEMP) - Local array used to hold the list of command line arguements passed from the cammandline during script execution.
  local l_TEMP

  # (l_RC) - Local boolean value used to test if any commandline arguements passed from the cammandline during script execution are invalid.
  declare -i l_RC

  # Error trapping is turned off because we want to handle errors.
  set +e
    l_TEMP="$(getopt -o hmU:uv --long makecert,updatesvr:,update -n "${g_PROGNAME}" -- "${@}")"
    l_RC="${?}"
  set -e

  # Check if any invalid options were passed and display help.
  if ((l_RC!=0)); then
    display_usage_message_and_bail_out
  fi

  # No arguements were passed to the script, display help.
  if [ $# -eq 0 ]; then
    display_usage_message_and_bail_out
  fi

  eval set -- "${l_TEMP}"

  for arg in "${@}"; do
    shift
    case "$arg" in
      --makecert)  set -- "$@" '-m' ;;
      --updatesvr) set -- "$@" '-U' ;;
      --update)    set -- "$@" '-u' ;;
      *)           set -- "$@" "$arg" ;;
    esac
  done

  # Set the first token for the error message when multiple tokens are passed.
  g_FIRST_TOKEN=${1}

  # Extract the options and their arguments into variables.
  while true ; do
    case "${1}" in
      -h) display_usage_message_and_bail_out ;;
      -m) g_ARG_MAKECERT=1; shift ;;
      -U) g_ARG_UPDATESVR=1; g_ARG_SERVERNAME=${2}; shift 2 ;;
      -u) g_ARG_UPDATE=1; shift ;;
      -v) print_version >&2; cleanup_and_exit_with_code 1 ;;
      --) shift; break ;;
    esac
  done
}

# (script_banner) - Function used to display the program banner when it is executed interactively from the CLI.
function script_banner ()
{
  printf "${g_WHITE_TEXT}${g_PROGRAM_NAME}, v${g_VERSION}${g_RESET_ATTS}\n"
  printf "${g_CYAN_TEXT}${g_COPYRIGHT_TEXT}${g_RESET_ATTS}\n"
  printf "${g_CYAN_TEXT}${g_AUTHOR_TEXT} <${g_AUTHOR_EMAIL}>${g_RESET_ATTS}\n"
  printf -- "--------------------------------------------------------------------------------\n\n"

  update
}

# (set_error_trapping) - Function used to enable and disable error handeling, unbound variables and filename pattern matching; the passed value is 1 for enabled or 0 for disabled.
function set_error_trapping ()
{
  # (l_BOOL) - Boolean value used to indicate a value of 0 or 1.
  l_BOOL='^[0-1]+$'
  if ! [[ $1 =~ $l_BOOL ]]; then
    error "Function: set_error_trapping was passed a value that is out of bounds."
  fi

  # (l_TRAP) - Local boolean value used to enable and disable how the script
  # behaves when certain error conditions are met.
  local l_TRAP="${1}"

  if ((l_TRAP == 0)); then
    # Disable errors when a command exits with a non-zero status.
    set +e

    # Disable errors on unbound (undefined) variables.
    set +u

    # Disable allowing filename patterns that match no files to expand to a null
    # string, rather than themselves.
    shopt -u nullglob
  else
    # Enable exiting immediately if a command exits with a non-zero status.
    set -e

    # Enable erroring on unbound (undefined) variables.
    set -u

    # Enable filename patterns that match no files to expand to a null
    # string, rather than themselves.
    shopt -s nullglob
  fi
}

# (trap_cleanup) - Function used to set how we want the script to handle any error conditions it encounters and what we want to do once those error conditions are encountered.
function trap_cleanup ()
{
  trap - SIGHUP SIGQUIT SIGINT SIGTERM SIGKILL EXIT
  error "Caught signal"
}
trap trap_cleanup SIGHUP SIGQUIT SIGINT SIGTERM SIGKILL EXIT

# (ver_comp) - Function used to compare the versions of the script update. Passed arguements ($1) old version, ($2) operand (\< \>), ($3) new version.
function ver_comp ()
{
  local x y IFS=. -; set -f
  local l_OLDVER=$1
  local l_OPER=$2
  local l_NEWVER=$3

  printf -v x %08d $l_OLDVER; printf -v y %08d $l_NEWVER
  test $x "$l_OPER" $y
}

# (update) - Function used to check for and update this script from the repository.
function update ()
{
  local l_TMP_FILE
  local l_ABS_PATH
  local l_VERSION

  cd "${g_SCRIPT_PATH}"

  # Test internet access.
  ping -q -c1 8.8.8.8 &>/dev/null
  if [ $? == 1 ]; then
    warning "This script does not have a required network connection to update itself."
    return
  fi

  # Get a new version of the script.
  l_TMP_FILE=$(mktemp -p "" "XXXXX.sh")
  curl -s -L "$g_SCRIPT_URL" > "$l_TMP_FILE"

  l_VERSION=$(grep "^g_VERSION" "$l_TMP_FILE" | awk -F'[="]' '{print $3}')

  # Compare the script versions and update if newer.
  if ver_comp $g_VERSION \< $l_VERSION; then
    if ((g_ARG_UPDATE==1)); then
      update-info "Updating the $g_PROGRAM_NAME script."

      # Create updater script.
      l_ABS_PATH=$(readlink -f "$g_SCRIPT_LOCATION")

      printf '#!/bin/bash\n\n' >> updater.sh
      printf "cp \"$l_TMP_FILE\" \"$l_ABS_PATH\"\n" >> updater.sh
      printf "rm $g_SCRIPT_PATH/updater.sh" >> updater.sh

      chmod +x updater.sh
      chmod 770 "$l_TMP_FILE"

      if [ $(getent group labuser) ]; then
        chown root:labuser "$l_TMP_FILE"
      else
        chown root:root "$l_TMP_FILE"
      fi

      exec /bin/bash "$g_SCRIPT_PATH/updater.sh"
    fi

    if ((g_ARG_UPDATE==0)); then
      update-info "There is a new version v$l_VERSION of the $g_PROGRAM_NAME script available.\n            To upgrade please type \"$g_PROGRAM_NAME -u\" at the command prompt.\n\n"
    fi

  else
    info "You are running the current version of this script.\n\n"
  fi

  rm -f "$l_TMP_FILE"
}

# (warning) - Function for formatted warning messages.
function warning ()
{
  echo -e "${g_YELLOW_TEXT}${g_PREFIXSTRING}${g_RESET_ATTS}WARNING: ${1}" >&2
}
# **************************** basic script functions **************************

# *************************** script specific functions ************************
function makecerts ()
{
  # CREATE WILDCARD CERTIFICATE
  if [ ! -f star.kisow.org.cert.pem ]; then
    info "Creating star.kisow.org.cert.pem"
    cp kisow.org_ssl_certificate.cer star.kisow.org.cert.pem
  fi

  # CREATE INTERMEDIATE CERTIFICATE
  if [ ! -f star.kisow.org.chain.pem ]; then
    info "Creating star.kisow.org.chain.pem"
    cp "*.kisow.org_ssl_certificate_INTERMEDIATE.cer" star.kisow.org.chain.pem
  fi

  # CREATE CERTIFICATE CHAIN
  if [ ! -f star.kisow.org.cert-chain.pem ]; then
    info "Creating star.kisow.org.cert-chain.pem"
    cat star.kisow.org.cert.pem star.kisow.org.chain.pem > star.kisow.org.cert-chain.pem
  fi

  # CREATE FULL CHAIN
  if [ ! -f star.kisow.org.fullchain.pem ]; then
    info "Creating star.kisow.org.fullchain.pem"
    cat star.kisow.org.cert.pem star.kisow.org.chain.pem star.kisow.org.privkey.pem > star.kisow.org.fullchain.pem 
  fi

  # CREATE PRIVATE KEY
  if [ ! -f star.kisow.org.privkey.pem ]; then
    info "Creating star.kisow.org.privkey.pem"
    cp "*.kisow.org_private_key.key" star.kisow.org.privkey.pem
  fi

  # CREATE PFX/P12 CERTIFICATE
  info "Creating PFX/P12 Certificates"
  openssl pkcs12 -password pass:ch354vky -export -out star.kisow.org.pfx -inkey star.kisow.org.privkey.pem -in star.kisow.org.cert.pem -certfile star.kisow.org.chain.pem
  openssl pkcs12 -password pass:ch354vky -export -out star.kisow.org.p12 -inkey star.kisow.org.privkey.pem -in star.kisow.org.cert.pem -certfile star.kisow.org.chain.pem
}

function updatesvrs ()
{
  info "  Updating the certificates on $g_ARG_SERVERNAME."
  sleep 5s

  # Cleanup incase of a previous borked run.
  if [[ -f "bootstrap.sh" ]]; then
    info "    Cleaning up messy environment, removing bootstrap.sh script."
    rm "${g_SCRIPT_PATH}/bootstrap.sh"
  fi

  # Cleanup incase of a previous borked run.
  if [[ -f "${g_SCRIPT_PATH}/updater.sh" ]]; then
    info "    Cleaning up messy environment, removing updater.sh script."
    rm "${g_SCRIPT_PATH}/updater.sh"
  fi

  # Create bootstrap script that will call the updater script.
  info "    Creating bootstrap script."
  printf '#!/bin/bash\n\n' >> bootstrap.sh
  printf "echo Ch354vk!0010 | sudo -S nohup /home/mkisowa/updater.sh &\n" >> bootstrap.sh
  printf "rm /home/mkisowa/bootstrap.sh\n" >> bootstrap.sh
  chmod +x bootstrap.sh

  # Create the updater script based on default ip address and new onr entered.
  info "    Creating certificate updater script."
  printf '#!/bin/bash\n\n' >> updater.sh
  printf "sleep 10s\n\n" >> updater.sh
  printf "mv /home/mkisowa/home/mkisowa/star.kisow.org.cert.pem /etc/ssl/certs/star.kisow.org.cert.pem\n" >> updater.sh
  printf "mv /home/mkisowa/home/mkisowa/star.kisow.org.chain.pem /etc/ssl/certs/star.kisow.org.cert-chain.pem\n" >> updater.sh
  printf "mv /home/mkisowa/home/mkisowa/star.kisow.org.privkey.pem /etc/ssl/private/star.kisow.org.privkey.pem\n" >> updater.sh
  printf "mv /home/mkisowa/home/mkisowa/star.kisow.org.fullchain.pem /etc/ssl/private/star.kisow.org.fullchain.pem\n" >> updater.sh
  printf "systemctl restart nginx.service\n" >> updater.sh
  printf "rm /home/mkisowa/updater.sh\n" >> updater.sh
  chmod +x updater.sh

  # Copy scripts and certificates to the source.
  sshpass -pCh354vk!0010 scp -o "StrictHostKeyChecking no" -o "HostKeyAlgorithms=+ssh-dss" -o "LogLevel=ERROR" updater.sh mkisowa@$g_ARG_SERVERNAME:/home/mkisowa/updater.sh
  sshpass -pCh354vk!0010 scp -o "StrictHostKeyChecking no" -o "HostKeyAlgorithms=+ssh-dss" -o "LogLevel=ERROR" bootstrap.sh mkisowa@$g_ARG_SERVERNAME:/home/mkisowa/bootstrap.sh
  sshpass -pCh354vk!0010 scp -o "StrictHostKeyChecking no" -o "HostKeyAlgorithms=+ssh-dss" -o "LogLevel=ERROR" star.kisow.org.cert.pem mkisowa@$gg_ARG_SERVERNAME:/home/mkisowa/star.kisow.org.cert.pem
  sshpass -pCh354vk!0010 scp -o "StrictHostKeyChecking no" -o "HostKeyAlgorithms=+ssh-dss" -o "LogLevel=ERROR" star.kisow.org.chain.pem mkisowa@$gg_ARG_SERVERNAME:/home/mkisowa/star.kisow.org.cert-chain.pem
  sshpass -pCh354vk!0010 scp -o "StrictHostKeyChecking no" -o "HostKeyAlgorithms=+ssh-dss" -o "LogLevel=ERROR" star.kisow.org.privkey.pem mkisowa@$gg_ARG_SERVERNAME:/home/mkisowa/star.kisow.org.privkey.pem
  sshpass -pCh354vk!0010 scp -o "StrictHostKeyChecking no" -o "HostKeyAlgorithms=+ssh-dss" -o "LogLevel=ERROR" star.kisow.org.fullchain.pem mkisowa@$gg_ARG_SERVERNAME:/home/mkisowa/star.kisow.org.fullchain.pem

  # Run the SSH script
  info "    Running certificate updatee script on g_ARG_SERVERNAME."
  sshpass -pCh354vk!0010 ssh -f -o "StrictHostKeyChecking no" -o "HostKeyAlgorithms=+ssh-dss" -o "LogLevel=ERROR" mkisowa@$g_ARG_SERVERNAME '/bin/bash /home/mkisowa/bootstrap.sh'
  if [ $? -eq 0 ]; then
    info "    TCPIP address updater script ran successfully."
  fi

  # Cleanup after run.
  if [[ -f "${g_SCRIPT_PATH}/bootstrap.sh" ]]; then
    info "    Cleaning up removing bootstrap.sh script."
    rm "${g_SCRIPT_PATH}/bootstrap.sh"
  fi

  if [[ -f "${g_SCRIPT_PATH}/updater.sh" ]]; then
    info "    Cleaning up removing updater.sh script."
    rm "${g_SCRIPT_PATH}/updater.sh"
  fi
}
# *************************** script specific functions ************************

# *************************** begin of script proper ***************************
process_command_line_options "${@}"
internal_consistency_option_checks

  # Check for the sshpass package required for this script.
  if command -v sshpass &>/dev/null; then
    info "sshpass is already installed."
  else
    error "The sshpass package is not installed."
  fi

  # MAKECERTS
  if ((g_ARG_MAKECERT==1)); then
    makecerts
  fi

  # UPDARE SERVER
  if ((g_ARG_UPDATESVR==1)); then
    updatesvrs
  fi

cleanup_and_exit_with_code 0
# **************************** end of script proper ****************************